exit
c
arrs[y]
arrs[y][x]
y
arrs[y][x]
c
arrs[y][x]
c
arrs[y][x]
arrs[y]
y
arrasy
arras
arrs[y]
exit
c
arrs[y][x]
c
arrs[y][x]
c
arrs[y][x]
new_arr[x]
new_arr
exit
c
y
number-y-1
new_arr[x][number-y-1]
new_arr[x]
new_arr
new_arra
arrs[x][y]
arrs[x]
y
x
exit
cc
c
x
arrs[y]
arrs[x]
y
x
exit
c
y
number
new_arr[x]
arrs[y][x]
x
arrs[x][y]
y
c
yc
y
x
y
arrs[x][y]
exit
c
y
arrs[x][y]
exit
new_arr[x][y]
new_arr[x]
new_arr[0]
new_arr
exit
c
x
y
exit
c
y
x
exit
c
n
y
x
exit
c
arrs[0]
arrs
x
temp_arr[item - 1]
temp_arr[item]
temp_arr
tempArr
tem_arr
n
item
c
n
c
temp_arr
n
c
n
temp_arr
c
n
str2
str1
c
arr
continue
str1_chars <=> str2_chars
str2_chars = ["r","a","c","k"]
str1_chars <=> str2_chars
str1_chars - str2_chars
str1_chars
c
arr.delete_if{|x| arr.count(x) > 1}
arr = str.chars
dup = str.chars.detect{|x| str.chars.count(x) > 1}
str.chars.detect{|x| str.chars.count(x) > 1}
str.chars
str.chars.detect{|x| str.chars.count(x) > 1}
str.chars.detect{|x| count(x) > 1}
str.to_a.detect{|x| count(x) > 1}
str.detect{|x| count(x) > 1}
str
hash_table.keys.count
hash_table.keys
number
c
number
str.chars.uniq.count
str.chars.uniq
str
hash_table.keys.count
hash_table.keys
hash_table
number
c
str.downcase
str.downcase!
str
c
str
c
c\
str.gsub!(" ", "")
str.gsub(" ", "")
str = "  abc ab  "
str.gsub(" ", "")
str.strip
str.stip
str
c
str
h_table
exit
c
value
position
exit
b.inspect
b
arr
arr.length
value
value >= 1
value- 1
b[value]
value
b = new Array(arr.length, 0)
arr
diff
continue
range.drop(2)
ar[counter]
arr
c
exit
c
range.nil?
range
c
counter
c
counter
range
c
range
c
arr[counter]
range
exit
c
counter
c
cc
c
range.drop(6)
range
c
range
c
range
exit
c
range.drop!(1)
range.drop(1!)
range.drop(1)!
range
range.drop(1)
range.drop(1)!
range.drop!(1)
range
c
arr[counter]
c
arr[counter]
c
arr[counter]
c
arr[counter]
c
arr[counter]
arr[counter]]
range
exit
c
range.drop(1)
range.drop(0)
arr[0]
arr
range.drop
range
c
arr.last
value
position
value.next
value.next != arr[position.next] || value != arr.last 
value
c
arr.last
value
arr
value
c
arr[1].pred
arr[1].methods.sort
ap arr[1].methods
arr[1]
arr[position]
arr
position
value
c
value
arr[position].next
